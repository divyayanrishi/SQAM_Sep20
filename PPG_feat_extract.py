import numpy as np
import math
from scipy import signal 
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split 
from sklearn import svm 
from sklearn import metrics 
import csv 
from sklearn.datasets._base import Bunch 

fs=300
fm=125
tm=0.008 #time difference between two adjacent samples in ppg

#arr=[11.375,11.3887,11.3914,11.4089,11.4196,11.4302,11.3744,11.3182,11.3156,11.3292,11.3511,11.3743,11.3796,11.3802,11.3899,11.4014,11.4164,11.4286,11.4515,11.4644,11.4427,11.3752,11.3404,11.3502,11.3717,11.3957,11.4072,11.4036,11.4038,11.4075,11.4217,11.446,11.4617,11.4833,11.4838,11.4143,11.3693,11.3674,11.3847,11.4025,11.4193,11.4204,11.4166,11.419,11.4311,11.4415,11.4534,11.4635,11.4758,11.4214,11.3564,11.3384,11.3527,11.3744,11.4012,11.4124,11.4073,11.4096,11.4195,11.4374,11.4557,11.4723,11.4851,11.4824,11.3986,11.3409,11.3384,11.3566,11.3784,11.3978,11.4017,11.395,11.3985,11.4097,11.4231,11.4419]
#arr_ir=[8.8101,8.8135,8.8134,8.8175,8.824,8.8124,8.7881,8.78,8.7822,8.7891,8.7996,8.8051,8.8074,8.8075,8.816,8.8183,8.824,8.829,8.8363,8.8388,8.8139,8.7899,8.7841,8.7881,8.8002,8.8058,8.8054,8.8054,8.8038,8.8063,8.8129,8.8215,8.8257,8.8281,8.8142,8.7902,8.7836,8.788,8.7934,8.801,8.8019,8.8023,8.8019,8.8005,8.8058,8.8056,8.8077,8.8092,8.8028,8.7761,8.7578,8.7618,8.7703,8.7813,8.7917,8.7913,8.792,8.7967,8.7994,8.8072,8.8102,8.8164,8.8168,8.7926,8.7659,8.7556,8.7645,8.7716,8.7841,8.7898,8.7869,8.7875,8.7929,8.7925,8.7983,8.8012]
arr=[0.43597,0.43206,0.42815,0.42424,0.42131,0.41838,0.4174,0.41642,0.41544,0.41447,0.41251,0.41153,0.40958,0.40762,0.40665,0.40665,0.40665,0.40762,0.4086,0.4086,0.41056,0.41153,0.41153,0.41056,0.4086,0.40665,0.40469,0.40469,0.40567,0.4086,0.41251,0.42033,0.43206,0.45259,0.4741,0.4956,0.51808,0.5347,0.55034,0.56403,0.57576,0.58456,0.59238,0.59629,0.59922,0.60117,0.60215,0.60313,0.60313,0.60117,0.59824,0.59335,0.58553,0.57771,0.57185,0.56207,0.54741,0.53372,0.52102,0.50929,0.50244,0.49756,0.4956,0.49462,0.49365,0.49365,0.49365,0.49169,0.48876,0.4868,0.48387,0.48094,0.47801,0.47507,0.47116,0.46823,0.46334,0.45846,0.45357,0.44868,0.44379,0.43891,0.435,0.43109,0.4262,0.42326,0.42033,0.41838,0.41642,0.41447,0.41447,0.41349,0.41251,0.41251,0.41251,0.41251,0.41251,0.41349,0.41544,0.4174,0.41935,0.42033,0.42131,0.42131,0.42033,0.41935,0.41642,0.41447,0.41349,0.41349,0.41642,0.42131,0.42815,0.43695,0.45064,0.46823,0.4868,0.50538,0.52395,0.54154,0.55816,0.57185,0.58162,0.58749,0.59042,0.59042,0.5914,0.59042,0.58944,0.58651,0.5826,0.57771,0.57087,0.56305,0.5523,0.54057,0.52884,0.51711,0.50733,0.49756,0.48778,0.47996,0.4741,0.47019,0.46823,0.46725,0.46628,0.46432,0.46041,0.4565,0.45259,0.4477,0.44379,0.43891,0.43304,0.43011,0.42717,0.42522,0.42229,0.41935,0.4174,0.41544,0.41349,0.41251,0.41153,0.41153,0.41153,0.41251,0.41349,0.41349,0.41447,0.41544,0.41642,0.41642,0.4174,0.4174,0.41838,0.41838,0.41838,0.41935,0.42033,0.42033,0.42131,0.42033,0.41838,0.41642,0.41544,0.41349,0.41153,0.41056,0.41153,0.41447,0.41935,0.42717,0.43891,0.45357,0.47214,0.48974,0.50831,0.52395,0.53666,0.54839,0.55914,0.56794,0.5738,0.57771,0.57967,0.57967,0.57869,0.57674,0.5738,0.56989,0.56403,0.55523,0.54448,0.53275,0.52102,0.50929,0.49951,0.49169,0.48583,0.47996,0.4741,0.46921,0.4653,0.46237,0.46041,0.45748,0.45455,0.45064,0.44575,0.44086,0.43695,0.43206,0.42815,0.42522,0.42326,0.42131,0.41935,0.4174,0.41544,0.41349,0.41251,0.41056,0.40958,0.4086,0.40762,0.40762,0.40762,0.40762,0.40762,0.4086,0.4086,0.40762,0.40762,0.40762,0.4086,0.4086,0.41056,0.41153,0.41153,0.41251,0.41251,0.41056,0.4086,0.40665,0.40469,0.40469,0.40567,0.4086,0.41447,0.42424,0.43793,0.4565,0.47507,0.49267,0.51222,0.53079,0.54936,0.565,0.57869,0.58944,0.59824,0.60411,0.60802,0.60997,0.60997,0.60997,0.60899,0.60899,0.60606,0.60117,0.59433,0.58456,0.57478,0.56305,0.55132,0.53959,0.52884,0.52102,0.5132,0.50635,0.50244,0.49853,0.49658,0.49462,0.49169,0.48876,0.48583,0.48094,0.47605,0.47214,0.46823,0.4653,0.46237,0.46041,0.45846,0.4565,0.45357,0.44966,0.44575,0.44184,0.43793,0.43304,0.42913,0.42424,0.41838,0.41447,0.41153,0.40958,0.4086,0.40958,0.40958,0.40958,0.41056,0.41056,0.41056,0.41056,0.41056,0.41056,0.41056,0.41153,0.41056,0.41056,0.41056,0.40958,0.40958,0.40958,0.40958,0.41056,0.41251,0.41642,0.42522,0.43793,0.45552,0.47605,0.49658,0.51808,0.53763,0.55523,0.56989,0.58065,0.58651,0.59238,0.59726,0.59922,0.6002,0.6002,0.59824,0.59433,0.58944,0.58456,0.57674,0.56696,0.55621]
#oxy=oxy_sat(arr,arr_ir)
#print("SpO2 level "+str(oxy))
data1=np.array(arr)
times=[i for i in range(len(arr))]

def heartbeat(arr,fm):
    peaks,_=signal.find_peaks(arr) 
    peaks1=[]
    for i in range(1,len(peaks)-1):
        if arr[peaks[i]]>arr[peaks[i-1]] and arr[peaks[i]]>arr[peaks[i+1]]:
            peaks1.append(peaks[i])
    peaks1=np.array(peaks1)        
    plt.plot(times,arr)
    plt.plot(peaks, arr[peaks], "x")
    plt.show()
    print(len(peaks1))
    nsec=len(arr)//fm
    hbr=(60//nsec)*len(peaks1)
    print(hbr)
    
def heartbeat2(arr):
    y1=[]
    y2=[]
    arr=[i*10000 for i in arr]
    #print(arr)
    sys_peak=[] 
    for i in range(1,len(arr)-1):
        if arr[i]>arr[i-1] and arr[i]>arr[i+1]:
            sys_peak.append(i) 
    for i in range(1,len(arr)):
        y1.append(arr[i]-arr[i-1])
    
    '''for i in range(1,len(y1)):
        y2.append(y1[i]-y1[i-1])
    thsld=0.5*max(y1)
    y1_peaks=[]
    for i in range(len(y1)):
        if y1[i]>thsld:
            y1_peaks.append(i)
    a=y1_peaks[0]
    b=y1_peaks[1]         
    sys_peak=[]
    print(y1)  
    stamps=[i for i in range(len(y1))]
    plt.plot(stamps,y1)
    plt.show()
    for i in range(a,b):
        if y1[i]>=-0.01 and y1[i]<=0.01:
            sys_peak.append(i)
        a=y1_peaks[1]
        b=y1_peaks[2]
        if(len(sys_peak)==2):
            break    
    print(sys_peak)     
    '''
    PPI=(sys_peak[2]-sys_peak[0])*0.008
    hbr=60/PPI
    hbr1=math.ceil(hbr)
    return hbr1 

def oxy_sat(red,ired):
    r_max=red[0]
    r_min=red[0]
    ir_max=ired[0]
    ir_min=ired[0]
    for i in range(1,len(red)):
        if(red[i]>r_max):
            r_max=red[i]
        if(red[i]<r_min):
            r_min=red[i]
    for i in range(1,len(ired)):
        if(ired[i]>ir_max):
            ir_max=ired[i]
        if(ired[i]<ir_min):
            ir_min=ired[i] 
    R=math.log(r_max/r_min)/math.log(ir_max/ir_min) 
    oxy_val=-24.78*R+137.8    #empirical formula for oxygen saturation level  
    return oxy_val           

#def perfusion_ind(): #left

def load_my_dataset():
    with open('D:\Research\Biomedical Image Proc\PPG records\bidmc_01_Signals (1) (data set).csv') as csv_file:
        data_file = csv.reader(csv_file)
        temp = next(data_file)
        n_samples = 150 #number of data rows, don't count header
        n_features = 2 #number of columns for features, don't count target column
        feature_names = ['SpO2','HR','Kurtosis','SE'] #adjust accordingly
        target_names = ['Well','Ill'] #adjust accordingly
        data = np.empty((n_samples, n_features))
        target = np.empty((n_samples,), dtype=np.int)

        for i, sample in enumerate(data_file):
            data[i] = np.asarray(sample[:-1], dtype=np.float64)
            target[i] = np.asarray(sample[-1], dtype=np.int)

    return Bunch(data=data, target=target, feature_names = feature_names, target_names = target_names)

heartbeat(data1,fm)
#print("Heartbeat rate "+str(hr))
